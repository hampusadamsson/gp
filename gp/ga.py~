import matplotlib.pyplot as plt
import copy
from root import *
import random



def plot(vals):
    plt.plot(vals)
    plt.ylabel('MSE')    
    plt.show()

    
class ga:
    iterations = 500
    pop_size = 25
    pop = []

    elit = 11
    mut_rate = 1

    result = []
    train_set = []#[[1,2,2,2],[7,2,3,21],[1,8,8,64]]
    
    
    def load_data(self):
        fname = '/home/hampus/Downloads/coursework2-training.csv'
        with open(fname) as f:
            content = f.readlines()
        content.pop(0)
        for x in content:
            var = x.split(',')

            tmp = []
            for y in var:
                tmp.append(float(y))
            self.train_set.append(tmp)


    def init(self):        
        for x in range(0, self.pop_size):
            ind = init_root(self.train_set)
            self.pop.append(ind)

            
    def evaluate(self):
        for ind in self.pop:
            ind.mse()

            
    def sort(self):
        self.pop.sort(key=lambda ind: ind.fit, reverse=False)

        
    def rank_select(self):
        total = sum(range(0, len(self.pop) + 1))
        r = random.uniform(0, total)
        tot = 0
        for c in range(0, len(self.pop)+1):
            if tot + c >= r:
                return self.pop[c-1]
            tot += c

    def crossover(self):
        child = copy.deepcopy(self.rank_select())
        return child
        
    
    # def crossover(self):
    #     child = init_tree(self.tree_depth, self.train_set)
    #     p1 = self.rank_select()
    #     p2 = self.rank_select()
    #     child = child.copy(p1)
        
    #     node = child.copy(p2.get_rnd_node())
    #     replace = child.get_rnd_node()
        
    #     while(node.is_terminal() != replace.is_terminal()):
    #         node = child.copy(p2.get_rnd_node())
    #         replace = child.get_rnd_node()

    #     replace = node

    #     child.train_set = self.train_set
    #     child.solve()
    #     return child
                            

    def run(self):
        for i in range(0, self.iterations):
            new_pop = []
            self.evaluate()
            self.sort()
            self.result.append(self.pop[0].fit)

            print self.pop[0].fit
            print self.pop[0].tree.make_list()

            
            #crossover
            for x in range(0, self.pop_size-self.elit):
                new_pop.append(self.crossover())

                
            #mutation
            for ind in new_pop:
                val = random.uniform(0, 1)
                if val < self.mut_rate:
                    ind.mutate() # implement mutation in tree

                    
            # ELITISM
            for x in range(0, self.elit):
                new_pop.append(self.pop.pop(0))


            self.pop = new_pop
            
        # END CHECK
        self.evaluate()
        self.sort()        
        return self.pop[0]

    
def batch():
    gan = ga()
    gan.load_data()
    gan.init()

    best = gan.run()
    
    print "---"
    print best.tree.make_list()
    print "MSE: " + str(best.fit)
    print "---"

    #plotting
    plot(gan.result)

    
batch()
    
